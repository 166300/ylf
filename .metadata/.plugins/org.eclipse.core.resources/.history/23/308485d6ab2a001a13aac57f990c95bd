package cn.e3mall.content.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.e3mall.content.service.ContentCategoryService;
import cn.e3mall.mapper.TbContentCategoryMapper;
import cn.e3mall.pojo.TbContentCategory;
import cn.e3mall.pojo.TbContentCategoryExample;
import cn.e3mall.pojo.TbContentCategoryExample.Criteria;
import cn.e3mall.pojo.TbContentExample;
import e3.e3mall.common.poji.EasyUITreeNode;
import e3.e3mall.common.util.E3Result;
@Service
public class ContentCategoryServiceImpl implements ContentCategoryService {

	@Autowired
	private TbContentCategoryMapper contentCategoryMapper;
	/*
	 * 
	 * 全查节点
	 * 
	 * */
	@Override
	public List<EasyUITreeNode> getContentCatList(long parentId) {
		//根据parentid查询子节点列表
		TbContentCategoryExample example=new TbContentCategoryExample();
		Criteria create = example.createCriteria();
		//设置查询条件
		create.andParentIdEqualTo(parentId);
		//执行查询
		List<TbContentCategory> catList = contentCategoryMapper.selectByExample(example);
		//转换成EasyUITreeNode列表
		List<EasyUITreeNode> noList=new ArrayList<>();
		for (TbContentCategory contentCategory : catList) {
			EasyUITreeNode node=new EasyUITreeNode();
			node.setId(contentCategory.getId());
			node.setText(contentCategory.getName());
			node.setState(contentCategory.getIsParent()?"closed":"open");
			//添加到列表
			noList.add(node);
		}
		return noList;
	}
	/*
	 * 
	 * 新增节点
	 * 
	 * */
	@Override
	public E3Result addContentCategory(long parentId, String name) {
		//创建一个tb_content_category表对应的pojo对象
		TbContentCategory category=new TbContentCategory();
		//设置pojo的属性
		category.setParentId(parentId);
		category.setName(name);
		//1正常  2删除
		category.setStatus(1);
		//默认排序是1
		category.setSortOrder(1);
		//新添加的节点一定是叶子节点
		category.setIsParent(false);
		category.setCreated(new Date());
		category.setUpdated(new Date());
		//插入数据库
		int insert = contentCategoryMapper.insert(category);
		//判断父节点的isparent属性。如果不是true改为true
		//根据parentId查询父节点
		TbContentCategory parent = contentCategoryMapper.selectByPrimaryKey(parentId);
		if(!parent.getIsParent()){
			parent.setIsParent(true);
			//跟新数据库
			contentCategoryMapper.updateByPrimaryKey(parent);
		}
		//返回结果返回E3Result,包含pojo
		return E3Result.ok(category);
	}
	/*
	 * 
	 * 删除节点
	 * 
	 * 	删除节点要判断 父节点/子节点
	 * 		父节点：删除时不让删除(有子节点有内容不允许)/可以删除(要删除所有 子节点过于繁琐)
	 * 		子节点：删除时判断他的父节点是否还存在子节点不存在  让父节点变为子节点
	 * */
	@Override
	public boolean delContentCategory(long id) {
		boolean mark=true;
		//查询是否存在子节点
		//查询条件是ParentId值等于自身ID
		TbContentCategoryExample example=new TbContentCategoryExample();
		Criteria createCriteria = example.createCriteria();
		createCriteria.andParentIdEqualTo(id);
		//查询是否是父类
		List<TbContentCategory> selectByExample = contentCategoryMapper.selectByExample(example);
		System.out.println(selectByExample.size());
		if(selectByExample.size()>0){
			//是父类不可删除
			return mark=false;
		}else{
			//不是父类
			//删除后判断父类是否还有子类\没有父类变子类
			contentCategoryMapper.deleteByPrimaryKey(id);
			//查询自己找到父类ParentId
			TbContentCategory category = contentCategoryMapper.selectByPrimaryKey(id);
			//按照自己的ParentId查父类下的其他子类
			example=new TbContentCategoryExample();
			createCriteria = example.createCriteria();
			createCriteria.andParentIdEqualTo(category.getParentId());
			//查到父类其他子类
			selectByExample = contentCategoryMapper.selectByExample(example);
			//判断父类是否还存在子类
			if(selectByExample.size()>0){
				//父类存在子类
			}else{
				//父类已经不是父类
				
			}
			return mark;
		}
	}
	/*
	 * 
	 * 修改节点
	 * 
	 * */
	@Override
	public void updContentCategory(long id, String name) {
		TbContentCategory category = contentCategoryMapper.selectByPrimaryKey(id);
		category.setName(name);
		contentCategoryMapper.updateByPrimaryKey(category);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
